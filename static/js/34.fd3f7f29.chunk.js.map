{"version":3,"sources":["views/dashboard/workshop/clients/ClientCreate.js","icons/ArrowRight.js","icons/Search.js","icons/ArrowLeft.js","components/dashboard/workshop/clients/ClientsListTable.js","components/dashboard/workshop/clients/ClientCreateForm.js"],"names":["ClientCreate","settings","useSettings","user","useAuth","navigate","useNavigate","useEffect","gtm","push","event","firebase","firestore","collection","doc","id","get","then","snap","data","rank","sx","backgroundColor","minHeight","py","maxWidth","compact","container","justifyContent","spacing","item","color","variant","separator","fontSize","mt","component","RouterLink","to","m","startIcon","ArrowRight","createSvgIcon","xmlns","viewBox","fill","fillRule","d","clipRule","Search","ArrowLeft","sortOptions","label","value","descendingComparator","a","b","orderBy","applySort","customers","sort","split","comparator","order","getComparator","stabilizedThis","map","el","index","newOrder","VehiclesListTable","props","other","useState","selectedCustomers","setSelectedCustomers","page","setPage","limit","setLimit","query","setQuery","setSort","hasAcceptedMarketing","isProspect","isReturning","filters","filteredCustomers","filter","customer","matches","containsQuery","forEach","property","toLowerCase","includes","Object","keys","key","applyFilters","paginatedCustomers","slice","applyPagination","enableBulkActions","length","selectedSomeCustomers","selectedAllCustomers","Card","Box","alignItems","display","flexWrap","p","width","TextField","fullWidth","InputProps","startAdornment","InputAdornment","position","onChange","target","placeholder","name","select","SelectProps","native","option","px","zIndex","Checkbox","checked","indeterminate","Button","ml","Scrollbar","minWidth","Table","TableHead","TableRow","TableCell","align","TableBody","isCustomerSelected","hover","selected","Avatar","src","avatar2","height","getInitials","Link","identification","number","email","phone","vehicles","orders","IconButton","TablePagination","count","onPageChange","newPage","onRowsPerPageChange","parseInt","rowsPerPage","rowsPerPageOptions","typeOptions","VehicleCreateForm","initialValues","type","address","date","registered","lastActivity","pin","rating","status","validationSchema","Yup","shape","max","required","min","onSubmit","values","setErrors","setStatus","setSubmitting","console","log","FieldValue","serverTimestamp","createClient","functions","httpsCallable","res","info","add","toast","success","catch","err","error","submit","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","Grid","lg","md","xs","CardContent","Boolean","helperText","onBlur","FormHelperText","disabled"],"mappings":"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","file":"static/js/34.fd3f7f29.chunk.js","sourcesContent":["import { useEffect } from 'react';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { Helmet } from 'react-helmet-async';\nimport { Box, Breadcrumbs, Button, Container, Grid, Link, Typography } from '@material-ui/core';\nimport { ClientCreateForm } from '../../../../components/dashboard/workshop/clients';\nimport useSettings from '../../../../hooks/useSettings';\nimport ArrowLeftIcon from '../../../../icons/ArrowLeft';\nimport ChevronRightIcon from '../../../../icons/ChevronRight';\nimport gtm from '../../../../lib/gtm';\nimport firebase from '../../../../lib/firebase';\nimport useAuth from '../../../../hooks/useAuth';\n\nconst ClientCreate = () => {\n  const { settings } = useSettings();\n  const { user } = useAuth();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    gtm.push({ event: 'page_view' });\n    firebase\n      .firestore()\n      .collection('staff')\n      .doc(user.id)\n      .get()\n      .then((snap) => {\n        if (snap.data().rank.id === 'dealership_agent') {\n          navigate('/dashboard');\n        }\n      });\n  }, []);\n\n  return (\n    <>\n      <Helmet>\n        <title>Dashboard: Crear Clientes | Mac Admin</title>\n      </Helmet>\n      <Box\n        sx={{\n          backgroundColor: 'background.default',\n          minHeight: '100%',\n          py: 8\n        }}\n      >\n        <Container maxWidth={settings.compact ? 'xl' : false}>\n          <Grid\n            container\n            justifyContent=\"space-between\"\n            spacing={3}\n          >\n            <Grid item>\n              <Typography\n                color=\"textPrimary\"\n                variant=\"h5\"\n              >\n                Agregar Cliente\n              </Typography>\n              <Breadcrumbs\n                aria-label=\"breadcrumb\"\n                separator={<ChevronRightIcon fontSize=\"small\" />}\n                sx={{ mt: 1 }}\n              >\n                <Link\n                  color=\"textPrimary\"\n                  component={RouterLink}\n                  to=\"/dashboard\"\n                  variant=\"subtitle2\"\n                >\n                  Dashboard\n                </Link>\n                <Link\n                  color=\"textPrimary\"\n                  component={RouterLink}\n                  to=\"/dashboard/taller/clientes\"\n                  variant=\"subtitle2\"\n                >\n                  Listado de Clientes\n                </Link>\n                <Typography\n                  color=\"textSecondary\"\n                  variant=\"subtitle2\"\n                >\n                  Agregar Cliente\n                </Typography>\n              </Breadcrumbs>\n            </Grid>\n            <Grid item>\n              <Box sx={{ m: -1 }}>\n                <Button\n                  color=\"primary\"\n                  component={RouterLink}\n                  startIcon={<ArrowLeftIcon fontSize=\"small\" />}\n                  sx={{ mt: 1 }}\n                  to=\"/dashboard/taller/clientes\"\n                  variant=\"outlined\"\n                >\n                  Cancelar\n                </Button>\n              </Box>\n            </Grid>\n          </Grid>\n          <Box sx={{ mt: 3 }}>\n            <ClientCreateForm />\n          </Box>\n        </Container>\n      </Box>\n    </>\n  );\n};\n\nexport default ClientCreate;\n","import createSvgIcon from '@material-ui/core/utils/createSvgIcon';\n\nconst ArrowRight = createSvgIcon(\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>, 'ArrowRight'\n);\n\nexport default ArrowRight;\n","import createSvgIcon from '@material-ui/core/utils/createSvgIcon';\n\nconst Search = createSvgIcon(\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>, 'Search'\n);\n\nexport default Search;\n","import createSvgIcon from '@material-ui/core/utils/createSvgIcon';\n\nconst ArrowLeft = createSvgIcon(\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>, 'ArrowLeft'\n);\n\nexport default ArrowLeft;\n","import { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n// import numeral from 'numeral';\nimport PropTypes from 'prop-types';\nimport {\n  Avatar,\n  Box,\n  Button,\n  Card,\n  Checkbox,\n  // Divider,\n  IconButton,\n  InputAdornment,\n  Link,\n  // Tab,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  // Tabs,\n  TextField,\n  // Typography\n} from '@material-ui/core';\nimport ArrowRightIcon from '../../../../icons/ArrowRight';\n// import PencilAltIcon from '../../../../icons/PencilAlt';\nimport SearchIcon from '../../../../icons/Search';\nimport getInitials from '../../../../utils/getInitials';\nimport Scrollbar from '../../../Scrollbar';\n\n// const tabs = [\n//   {\n//     label: 'All',\n//     value: 'all'\n//   },\n//   {\n//     label: 'Accepts Marketing',\n//     value: 'hasAcceptedMarketing'\n//   },\n//   {\n//     label: 'Prospect',\n//     value: 'isProspect'\n//   },\n//   {\n//     label: 'Returning',\n//     value: 'isReturning'\n//   }\n// ];\n\nconst sortOptions = [\n  {\n    label: 'Más recientes',\n    value: 'updatedAt|desc'\n  },\n  {\n    label: 'Menos recientes',\n    value: 'updatedAt|asc'\n  },\n  {\n    label: 'Total',\n    value: 'orders|desc'\n  },\n  {\n    label: 'Total',\n    value: 'orders|asc'\n  }\n];\n\nconst applyFilters = (customers, query, filters) => customers\n  .filter((customer) => {\n    let matches = true;\n\n    if (query) {\n      const properties = ['email', 'name'];\n      let containsQuery = false;\n\n      properties.forEach((property) => {\n        if (customer[property].toLowerCase().includes(query.toLowerCase())) {\n          containsQuery = true;\n        }\n      });\n\n      if (!containsQuery) {\n        matches = false;\n      }\n    }\n\n    Object.keys(filters).forEach((key) => {\n      const value = filters[key];\n\n      if (value && customer[key] !== value) {\n        matches = false;\n      }\n    });\n\n    return matches;\n  });\n\nconst applyPagination = (customers, page, limit) => customers\n  .slice(page * limit, page * limit + limit);\n\nconst descendingComparator = (a, b, orderBy) => {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n\n  return 0;\n};\n\nconst getComparator = (order, orderBy) => (order === 'desc'\n  ? (a, b) => descendingComparator(a, b, orderBy)\n  : (a, b) => -descendingComparator(a, b, orderBy));\n\nconst applySort = (customers, sort) => {\n  const [orderBy, order] = sort.split('|');\n  const comparator = getComparator(order, orderBy);\n  const stabilizedThis = customers.map((el, index) => [el, index]);\n\n  stabilizedThis.sort((a, b) => {\n    const newOrder = comparator(a[0], b[0]);\n\n    if (newOrder !== 0) {\n      return newOrder;\n    }\n\n    return a[1] - b[1];\n  });\n\n  return stabilizedThis.map((el) => el[0]);\n};\n\nconst VehiclesListTable = (props) => {\n  const { customers, ...other } = props;\n  // const [currentTab, setCurrentTab] = useState('all');\n  const [selectedCustomers, setSelectedCustomers] = useState([]);\n  const [page, setPage] = useState(0);\n  const [limit, setLimit] = useState(5);\n  const [query, setQuery] = useState('');\n  const [sort, setSort] = useState(sortOptions[0].value);\n  const [filters] = useState({\n    hasAcceptedMarketing: null,\n    isProspect: null,\n    isReturning: null\n  });\n\n  // const handleTabsChange = (event, value) => {\n  //   const updatedFilters = {\n  //     ...filters,\n  //     hasAcceptedMarketing: null,\n  //     isProspect: null,\n  //     isReturning: null\n  //   };\n\n  //   if (value !== 'all') {\n  //     updatedFilters[value] = true;\n  //   }\n\n  //   setFilters(updatedFilters);\n  //   setSelectedCustomers([]);\n  //   setCurrentTab(value);\n  // };\n\n  const handleQueryChange = (event) => {\n    setQuery(event.target.value);\n  };\n\n  const handleSortChange = (event) => {\n    setSort(event.target.value);\n  };\n\n  const handleSelectAllCustomers = (event) => {\n    setSelectedCustomers(event.target.checked\n      ? customers.map((customer) => customer.id)\n      : []);\n  };\n\n  // const handleSelectOneCustomer = (event, customerId) => {\n  //   if (!selectedCustomers.includes(customerId)) {\n  //     setSelectedCustomers((prevSelected) => [...prevSelected, customerId]);\n  //   } else {\n  //     setSelectedCustomers((prevSelected) => prevSelected.filter((id) => id !== customerId));\n  //   }\n  // };\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleLimitChange = (event) => {\n    setLimit(parseInt(event.target.value, 10));\n  };\n\n  const filteredCustomers = applyFilters(customers, query, filters);\n  const sortedCustomers = applySort(filteredCustomers, sort);\n  const paginatedCustomers = applyPagination(sortedCustomers, page, limit);\n  const enableBulkActions = selectedCustomers.length > 0;\n  const selectedSomeCustomers = selectedCustomers.length > 0\n    && selectedCustomers.length < customers.length;\n  const selectedAllCustomers = selectedCustomers.length === customers.length;\n\n  return (\n    <Card {...other}>\n      <Box\n        sx={{\n          alignItems: 'center',\n          display: 'flex',\n          flexWrap: 'wrap',\n          m: -1,\n          p: 2\n        }}\n      >\n        <Box\n          sx={{\n            m: 1,\n            maxWidth: '100%',\n            width: 500\n          }}\n        >\n          <TextField\n            fullWidth\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <SearchIcon fontSize=\"small\" />\n                </InputAdornment>\n              )\n            }}\n            onChange={handleQueryChange}\n            placeholder=\"Buscar...\"\n            value={query}\n            variant=\"outlined\"\n          />\n        </Box>\n        <Box\n          sx={{\n            m: 1,\n            width: 240\n          }}\n        >\n          <TextField\n            label=\"Ordenar Por\"\n            name=\"sort\"\n            onChange={handleSortChange}\n            select\n            SelectProps={{ native: true }}\n            value={sort}\n            variant=\"outlined\"\n          >\n            {sortOptions.map((option) => (\n              <option\n                key={option.value}\n                value={option.value}\n              >\n                {option.label}\n              </option>\n            ))}\n          </TextField>\n        </Box>\n      </Box>\n      {enableBulkActions && (\n        <Box sx={{ position: 'relative' }}>\n          <Box\n            sx={{\n              backgroundColor: 'background.paper',\n              mt: '6px',\n              position: 'absolute',\n              px: '4px',\n              width: '100%',\n              zIndex: 2\n            }}\n          >\n            <Checkbox\n              checked={selectedAllCustomers}\n              color=\"primary\"\n              indeterminate={selectedSomeCustomers}\n              onChange={handleSelectAllCustomers}\n            />\n            <Button\n              color=\"primary\"\n              sx={{ ml: 2 }}\n              variant=\"outlined\"\n            >\n              Delete\n            </Button>\n            <Button\n              color=\"primary\"\n              sx={{ ml: 2 }}\n              variant=\"outlined\"\n            >\n              Edit\n            </Button>\n          </Box>\n        </Box>\n      )}\n      <Scrollbar>\n        <Box sx={{ minWidth: 700 }}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                {/* <TableCell padding=\"checkbox\">\n                  <Checkbox\n                    checked={selectedAllCustomers}\n                    color=\"primary\"\n                    indeterminate={selectedSomeCustomers}\n                    onChange={handleSelectAllCustomers}\n                  />\n                </TableCell> */}\n                <TableCell>\n                  Nombre\n                </TableCell>\n                <TableCell>\n                  Identificación\n                </TableCell>\n                <TableCell>\n                  Email\n                </TableCell>\n                <TableCell>\n                  Teléfono\n                </TableCell>\n                <TableCell>\n                  Cant. Vehículos\n                </TableCell>\n                <TableCell>\n                  Cant. Órdenes\n                </TableCell>\n                <TableCell align=\"right\">\n                  Acciones\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {paginatedCustomers.map((customer) => {\n                const isCustomerSelected = selectedCustomers.includes(customer.id);\n\n                return (\n                  <TableRow\n                    hover\n                    key={customer.id}\n                    selected={isCustomerSelected}\n                  >\n                    {/* <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        checked={isCustomerSelected}\n                        color=\"primary\"\n                        onChange={(event) => handleSelectOneCustomer(event, customer.id)}\n                        value={isCustomerSelected}\n                      />\n                    </TableCell> */}\n                    <TableCell>\n                      <Box\n                        sx={{\n                          alignItems: 'center',\n                          display: 'flex'\n                        }}\n                      >\n                        <Avatar\n                          src={customer.avatar2}\n                          sx={{\n                            height: 42,\n                            width: 42\n                          }}\n                        >\n                          {getInitials(customer.name)}\n                        </Avatar>\n                        <Box sx={{ ml: 1 }}>\n                          <Link\n                            color=\"inherit\"\n                            component={RouterLink}\n                            to={`/dashboard/taller/clientes/detalles/${customer.id}`}\n                            variant=\"subtitle2\"\n                          >\n                            {customer.name}\n                          </Link>\n                          {/* <Typography\n                            color=\"textSecondary\"\n                            variant=\"body2\"\n                          >\n                            {customer.brand_name}\n                          </Typography> */}\n                        </Box>\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      {`${customer.identification.number}`}\n                    </TableCell>\n                    <TableCell>\n                      {`${customer.email}`}\n                    </TableCell>\n                    <TableCell>\n                      {customer.phone}\n                    </TableCell>\n                    <TableCell>\n                      {customer.vehicles.length}\n                    </TableCell>\n                    <TableCell>\n                      {customer.orders.length}\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      {/* <IconButton\n                        component={RouterLink}\n                        to=\"/dashboard/customers/1/edit\"\n                      >\n                        <PencilAltIcon fontSize=\"small\" />\n                      </IconButton> */}\n                      <IconButton\n                        component={RouterLink}\n                        to={`/dashboard/taller/clientes/detalles/${customer.id}`}\n                      >\n                        <ArrowRightIcon fontSize=\"small\" />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </Box>\n      </Scrollbar>\n      <TablePagination\n        component=\"div\"\n        count={filteredCustomers.length}\n        onPageChange={handlePageChange}\n        onRowsPerPageChange={handleLimitChange}\n        page={page}\n        rowsPerPage={limit}\n        rowsPerPageOptions={[5, 10, 25]}\n      />\n    </Card>\n  );\n};\n\nVehiclesListTable.propTypes = {\n  customers: PropTypes.array.isRequired\n};\n\nexport default VehiclesListTable;\n","// import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport toast from 'react-hot-toast';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  // CardHeader,\n  // Checkbox,\n  // FormControlLabel,\n  FormHelperText,\n  Grid,\n  TextField,\n  // Typography\n} from '@material-ui/core';\n// import FileDropzone from '../../../FileDropzone';\n// import QuillEditor from '../../QuillEditor';\n/* eslint-disable import/no-duplicates */\nimport firebase from '../../../../lib/firebase';\nimport { functions } from '../../../../lib/firebase';\n\nconst typeOptions = [\n  {\n    value: '',\n    id: ''\n  },\n  {\n    value: 'Cedula',\n    id: 'Cedula'\n  },\n  {\n    id: 'RIF',\n    value: 'RIF'\n  },\n];\n\nconst VehicleCreateForm = (props) => {\n  const navigate = useNavigate();\n\n  // useEffect(() => {\n  //   firebase\n  //     .firestore()\n  //     .collection('dealership_brands')\n  //     .get()\n  //     .then((snapshot) => {\n  //       const data = [{ id: '', name: '', vehicles_count: 0 }];\n  //       snapshot.forEach((doc) => {\n  //         /* eslint-disable object-shorthand */\n  //         data.push({ ...doc.data(), id: doc.id });\n  //       });\n  //       console.log(data);\n  //       setBrandsOptions(data);\n  //     });\n  // }, []);\n\n  // const handleDrop = (newFiles) => {\n  //   setFiles((prevFiles) => [...prevFiles, ...newFiles]);\n  // };\n\n  // const handleRemove = (file) => {\n  //   setFiles((prevFiles) => prevFiles.filter((_file) => _file.path\n  //     !== file.path));\n  // };\n\n  // const handleRemoveAll = () => {\n  //   setFiles([]);\n  // };\n\n  // const save = (client) => {\n  //   console.log('EN save');\n  //   client.date.registered = firebase.firestore.FieldValue.serverTimestamp();\n  //   client.date.lastActivity = firebase.firestore.FieldValue.serverTimestamp();\n\n  //   console.log(client.email);\n  //   // dispatch(update(client))\n  //   const createClient = firebase.functions.httpsCallable('prueba');\n  //   return createClient(client.email)\n  //     .then((res) => {\n  //       console.log(res);\n  //       firebase\n  //         .firestore()\n  //         .collection('workshop_clients')\n  //         .doc(res.data)\n  //         .set(client)\n  //         .then(() => {\n  //           toast.success('Cliente Registrado', `Se ha registrado al cliente ${client.name} exitosamente!`);\n  //         });\n  //     }).catch((err) => console.log(err));\n  // };\n\n  return (\n    <Formik\n      initialValues={{\n        key: '',\n        name: '',\n        phone: 0,\n        number: 0,\n        type: '',\n        email: '',\n        address: '',\n        date: {\n          registered: null,\n          lastActivity: null,\n        },\n        orders: [],\n        vehicles: [],\n        pin: '0000',\n        rating: 5,\n        status: '0',\n        // submit: null\n      }}\n      validationSchema={Yup\n        .object()\n        .shape({\n          key: Yup.string().max(255),\n          name: Yup.string().max(255).required(),\n          phone: Yup.number().min(0).required(),\n          type: Yup.string().max(255).required(),\n          number: Yup.number().min(0).required(),\n          email: Yup.string().max(255).required(),\n          address: Yup.string().max(255).required(),\n        })}\n      onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\n        try {\n          // NOTE: Make API request\n          console.log('EN save');\n          values.date.registered = firebase.firestore.FieldValue.serverTimestamp();\n          values.date.lastActivity = firebase.firestore.FieldValue.serverTimestamp();\n\n          console.log(values.email);\n          // dispatch(update(values))\n          const createClient = functions.httpsCallable('prueba');\n          return createClient(values.email)\n            .then((res) => {\n              console.log(res);\n              values.key = res.data;\n              const info = {\n                identification: {\n                  number: values.number,\n                  type: values.type,\n                },\n                key: values.key,\n                phone: values.phone,\n                name: values.name,\n                type: values.type,\n                email: values.email,\n                address: values.address,\n                date: {\n                  registered: values.date.registered,\n                  lastActivity: values.date.lastActivity,\n                },\n                orders: values.orders,\n                vehicles: values.vehicles,\n                pin: values.pin,\n                rating: values.rating,\n                status: values.status,\n              };\n              console.log(info);\n              firebase\n                .firestore()\n                .collection('workshop_clients')\n                .add(info)\n                .then(() => {\n                  toast.success('Cliente Registrado', `Se ha registrado al cliente ${values.name} exitosamente!`);\n                  setStatus({ success: true });\n                  setSubmitting(false);\n                  navigate('/dashboard/taller/clientes');\n                  return true;\n                  // toast.success('Product created!');\n                });\n            })\n            .catch((err) => {\n              console.error(err);\n              toast.error('Something went wrong!');\n              setStatus({ success: false });\n              setErrors({ submit: err.message });\n              setSubmitting(false);\n              return true;\n            });\n        } catch (err) {\n          console.error(err);\n          toast.error('Something went wrong!');\n          setStatus({ success: false });\n          setErrors({ submit: err.message });\n          setSubmitting(false);\n          return true;\n        }\n      }}\n    >\n      {({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        // setFieldValue,\n        touched,\n        values\n      }) => (\n        <form\n          onSubmit={handleSubmit}\n          {...props}\n        >\n          <Grid\n            container\n            spacing={3}\n          >\n            <Grid\n              item\n              lg={12}\n              md={12}\n              xs={12}\n            >\n              <Card>\n                <CardContent>\n                  <Grid\n                    container\n                    spacing={3}\n                  >\n                    <Grid\n                      item\n                      md={6}\n                      xs={12}\n                    >\n                      <TextField\n                        error={Boolean(touched.name && errors.name)}\n                        fullWidth\n                        helperText={touched.name && errors.name}\n                        label=\"Nombre y Apellido\"\n                        name=\"name\"\n                        type=\"text\"\n                        onBlur={handleBlur}\n                        onChange={handleChange}\n                        value={values.name}\n                        variant=\"outlined\"\n                      />\n                    </Grid>\n                    <Grid\n                      item\n                      md={6}\n                      xs={12}\n                    >\n                      <TextField\n                        error={Boolean(touched.phone && errors.phone)}\n                        fullWidth\n                        helperText={touched.phone && errors.phone}\n                        label=\"Teléfono\"\n                        name=\"phone\"\n                        type=\"number\"\n                        onBlur={handleBlur}\n                        onChange={handleChange}\n                        value={values.phone}\n                        variant=\"outlined\"\n                      />\n                    </Grid>\n                    <Grid\n                      item\n                      md={6}\n                      xs={12}\n                    >\n                      <TextField\n                        fullWidth\n                        label=\"Tipo de ID\"\n                        name=\"type\"\n                        onChange={handleChange}\n                        select\n                        SelectProps={{ native: true }}\n                        value={values.type}\n                        variant=\"outlined\"\n                      >\n                        {typeOptions.map((type) => (\n                          <option\n                            key={type.id}\n                            value={type.id}\n                          >\n                            {type.value}\n                          </option>\n                        ))}\n                      </TextField>\n                    </Grid>\n                    <Grid\n                      item\n                      md={6}\n                      xs={12}\n                    >\n                      <TextField\n                        error={Boolean(touched.number && errors.number)}\n                        fullWidth\n                        helperText={touched.number && errors.number}\n                        label=\"ID\"\n                        name=\"number\"\n                        type=\"number\"\n                        onBlur={handleBlur}\n                        onChange={handleChange}\n                        value={values.number}\n                        variant=\"outlined\"\n                      />\n                    </Grid>\n                    <Grid\n                      item\n                      md={6}\n                      xs={12}\n                    >\n                      <TextField\n                        error={Boolean(touched.email && errors.email)}\n                        fullWidth\n                        helperText={touched.email && errors.email}\n                        label=\"Email\"\n                        name=\"email\"\n                        type=\"email\"\n                        onBlur={handleBlur}\n                        onChange={handleChange}\n                        value={values.email}\n                        variant=\"outlined\"\n                      />\n                    </Grid>\n                    <Grid\n                      item\n                      md={6}\n                      xs={12}\n                    >\n                      <TextField\n                        error={Boolean(touched.address && errors.address)}\n                        fullWidth\n                        helperText={touched.address && errors.address}\n                        label=\"Address\"\n                        name=\"address\"\n                        type=\"text\"\n                        onBlur={handleBlur}\n                        onChange={handleChange}\n                        value={values.address}\n                        variant=\"outlined\"\n                      />\n                    </Grid>\n                  </Grid>\n                </CardContent>\n              </Card>\n            </Grid>\n            <Grid\n              item\n              lg={2}\n              md={2}\n              xs={12}\n            >\n              {errors.submit && (\n                <Box sx={{ mt: 3 }}>\n                  <FormHelperText error>\n                    {errors.submit}\n                  </FormHelperText>\n                </Box>\n              )}\n              <Box\n                sx={{\n                  display: 'flex',\n                  justifyContent: 'flex-end',\n                  mt: 3\n                }}\n              >\n                <Button\n                  color=\"primary\"\n                  disabled={isSubmitting}\n                  type=\"submit\"\n                  variant=\"contained\"\n                  // onClick={() => save(values)}\n                >\n                  Registrar Cliente\n                </Button>\n              </Box>\n            </Grid>\n          </Grid>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nexport default VehicleCreateForm;\n"],"sourceRoot":""}