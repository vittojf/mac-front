{"version":3,"sources":["components/dashboard/store/orders/OrderForm.js","hooks/useInput.js","repositories/driver.repository.js","components/dashboard/store/orders/OrderForm1.js","components/widgets/modals/Modal9.js","views/dashboard/store/orders/OrderCreate.js","icons/ArrowLeft.js","icons/Check.js","repositories/order.repository.js","repositories/client.repository.js"],"names":["OrderForm","props","clientRepository","ClientRepository","useState","clientsOptions","setclientsOptions","isSubmit","setIsSubmit","setStatusForm","setDataClient","dataClient","setStatusRegisterClient","useEffect","getAllClients","then","res","console","log","initialValues","client_dni","validationSchema","Yup","shape","max","required","onSubmit","values","a","setErrors","setStatus","setSubmitting","client","filter","data","dni","length","toast","success","icon","error","submit","message","errors","handleBlur","handleChange","handleSubmit","touched","Grid","container","spacing","item","lg","md","xs","Card","CardContent","TextField","Boolean","fullWidth","helperText","label","name","type","onBlur","onChange","value","variant","Box","sx","mt","FormHelperText","display","justifyContent","Button","color","disabled","onClick","useInput","initialValue","setValue","suggestions","setSuggestions","event","target","endpoint","fetch","response","json","results","features","onchange","DriverRepository","cfg","EndpointConfig","axios","create","baseURL","URL_DEV","headers","headerToken","this","ws","get","id","driverId","deliveryId","post","OrderForm1","orderRepository","OrderRepository","driverRepository","address","statusRegisterClient","registerClient","dataClientRegister","client_name","lastname","client_lastname","phones","direction","zipcode","status_id","coordinates","score","createClient","catch","err","registerOrden","dataOrdenCreate","client_id","store_id","driver_id","price","final_price","preparation_estimated_time","delivery_estimated_time","createOrder","toString","origin_location","destination_location","Date","toISOString","postNotify","com","status","isSubmitting","setFieldValue","CardHeader","title","Divider","multiline","rows","Autocomplete","getOptionLabel","option","place_name","isOptionEqualToValue","e","options","renderInput","params","placeholder","MobileDateTimePicker","date","inputProps","Typography","numeral","format","my","Modal9","backgroundColor","minHeight","p","Container","maxWidth","Paper","elevation","flexDirection","alignItems","Avatar","theme","alpha","palette","main","mb","Check","align","size","component","RouterLink","to","OrderCreate","settings","useSettings","statusForm","setstatusform","setdataclient","setstatusregisterclient","navigate","useNavigate","gtm","push","py","compact","Breadcrumbs","separator","ChevronRight","fontSize","Link","m","startIcon","ArrowLeft","createSvgIcon","xmlns","viewBox","fill","fillRule","d","clipRule","body","put","delete"],"mappings":"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","file":"static/js/37.80173820.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom';\nimport toast from 'react-hot-toast';\n// import { usePlacesWidget } from 'react-google-autocomplete';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport PropTypes from 'prop-types';\nimport {\n  // Autocomplete,\n  Box,\n  Button,\n  Card,\n  CardContent,\n  // CardHeader,\n  // Checkbox,\n  // FormControlLabel,\n  FormHelperText,\n  Grid,\n  TextField,\n  // Typography\n} from '@material-ui/core';\n// import FileDropzone from '../../../FileDropzone';\n// import QuillEditor from '../../QuillEditor';\n/* eslint-disable import/no-duplicates */\n// import firebase from '../../../lib/firebase';\n// import Map from '../map/Map';\n// import { functions } from '../../../../lib/firebase';\nimport ClientRepository from '../../../../repositories/client.repository';\n\nconst OrderForm = (props) => {\n  const clientRepository = new ClientRepository();\n  // const navigate = useNavigate();\n  // const country = 'us';\n  // const clientsOptions = [{ value: '', name: '' }];\n  const [clientsOptions, setclientsOptions] = useState([]);\n  const [isSubmit, setIsSubmit] = useState(false);\n  // const { ref, options } = usePlacesWidget({\n  //   apiKey: 'AIzaSyB6ljOYFwZNV1Dm4NXgmbqOdEL0GbOGVnQ',\n  //   onPlaceSelected: (place) => {\n  //     console.log(place);\n  //   }\n  // });\n  const { setStatusForm, setDataClient, dataClient, setStatusRegisterClient } = props;\n\n  // const { ref: materialRef } = usePlacesWidget({\n  //   apiKey: 'AIzaSyB6ljOYFwZNV1Dm4NXgmbqOdEL0GbOGVnQ',\n  //   onPlaceSelected: (place) => console.log(place),\n  //   inputAutocompleteValue: 'country',\n  //   options: {\n  //     componentRestrictions: { country },\n  //   },\n  // });\n\n  useEffect(() => {\n    // console.log(brandsOptions);\n    clientRepository.getAllClients().then((res) => {\n      setclientsOptions(res);\n      console.log(res);\n    });\n  }, []);\n\n  return (\n    <Formik\n      initialValues={{\n        client_dni: '',\n        // submit: null\n      }}\n      validationSchema={Yup\n        .object()\n        .shape({\n          client_dni: Yup.string().max(255).required('El DNI del cliente es obligatorio'),\n        })}\n      onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\n        try {\n          const client = clientsOptions.filter((data) => data.dni === values.client_dni);\n          if (client.length === 1) {\n            setDataClient(client[0]);\n            toast.success('El Cliente existe!');\n            setStatusRegisterClient(true);\n          } else {\n            toast('El Cliente no esta Registrado!', {\n              icon: '⚠',\n            });\n            setDataClient({ dni: values.client_dni });\n            // toast.name('El Cliente no existe!');\n          }\n          setStatusForm('2');\n          setSubmitting(true);\n          setIsSubmit(true);\n          console.log(dataClient);\n          return true;\n        } catch (err) {\n          console.error(err);\n          toast.error('Ha Ocurrido un Error');\n          setStatus({ success: false });\n          setErrors({ submit: err.message });\n          setSubmitting(false);\n          setIsSubmit(false);\n          return true;\n        }\n      }}\n    >\n      {({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        // isSubmitting,\n        // setFieldValue,\n        touched,\n        values\n      }) => (\n        <form\n          onSubmit={handleSubmit}\n          {...props}\n        >\n          <Grid\n            container\n            spacing={3}\n          >\n            <Grid\n              item\n              lg={12}\n              md={12}\n              xs={12}\n            >\n              <Card>\n                <CardContent>\n                  <Grid\n                    container\n                    spacing={3}\n                  >\n                    <Grid\n                      item\n                      md={12}\n                      xs={12}\n                    >\n                      <TextField\n                        error={Boolean(touched.client_dni && errors.client_dni)}\n                        fullWidth\n                        helperText={touched.client_dni && errors.client_dni ? 'Campo Requerido' : null}\n                        label=\"DNI del Cliente\"\n                        name=\"client_dni\"\n                        type=\"text\"\n                        onBlur={handleBlur}\n                        onChange={handleChange}\n                        value={values.client_dni}\n                        variant=\"outlined\"\n                      />\n                    </Grid>\n                  </Grid>\n                </CardContent>\n              </Card>\n            </Grid>\n            <Grid\n              item\n              lg={2}\n              md={2}\n              xs={12}\n            >\n              {errors.submit && (\n                <Box sx={{ mt: 3 }}>\n                  <FormHelperText error>\n                    {errors.submit}\n                  </FormHelperText>\n                </Box>\n              )}\n              <Box\n                sx={{\n                  display: 'flex',\n                  justifyContent: 'flex-end',\n                  mt: 3\n                }}\n              >\n                <Button\n                  color=\"primary\"\n                  disabled={isSubmit}\n                  type=\"submit\"\n                  variant=\"contained\"\n                  onClick={() => {\n                    // setStatusForm('2');\n                  }}\n                >\n                  Continuar\n                </Button>\n              </Box>\n            </Grid>\n          </Grid>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nOrderForm.propTypes = {\n  setStatusForm: PropTypes.func,\n  setDataClient: PropTypes.func,\n  dataClient: PropTypes.string,\n  setStatusRegisterClient: PropTypes.func\n};\n\nexport default OrderForm;\n","import { useState } from 'react';\n\nconst useInput = (initialValue) => {\n  const [value, setValue] = useState(initialValue);\n  const [suggestions, setSuggestions] = useState([]);\n\n  const handleChange = async (event) => {\n    setValue(event.target.value);\n    try {\n      const endpoint = `https://api.mapbox.com/geocoding/v5/mapbox.places/${event.target.value}.json?access_token=pk.eyJ1IjoiZXplcXVpZWxmcmlhczIwIiwiYSI6ImNsMmpkdWlxcTAxM2QzY2t3ajR0N3pyOGUifQ.gxfc3ag0w310q1l9t0VYJw&autocomplete=true`;\n      const response = await fetch(endpoint);\n      const results = await response.json();\n      setSuggestions(results?.features);\n      console.log(results);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return {\n    value,\n    onchange: handleChange,\n    setValue,\n    suggestions,\n    setSuggestions\n  };\n};\n\nexport default useInput;\n","import axios from 'axios';\nimport { EndpointConfig } from '../config/config';\n\nexport default class DriverRepository {\n  // Definir el cliente Axios para consumir el servicio\n  get ws() {\n    const cfg = new EndpointConfig();\n    const ws = axios.create({\n      baseURL: cfg.URL_DEV,\n      headers: cfg.headerToken(),\n    });\n    return ws;\n  }\n\n  async getAllDrivers() {\n    const endpoint = '/driver';\n    const res = await this.ws.get(endpoint);\n    return res.data;\n  }\n\n  async getDriverById(id) {\n    const endpoint = `/driver/${id}`;\n    const res = await this.ws.get(endpoint);\n    return res.data;\n  }\n\n  async postNotify(driverId, deliveryId) {\n    const endpoint = '/driver/delivery/notify';\n    const res = await this.ws.post(endpoint, { driverId, deliveryId });\n    return res.data;\n  }\n\n  //   async update(id, body) {\n  //     const endpoint = `/users/${id}`;\n\n  //     let res = await this.ws.put(endpoint, body);\n  //     return res;\n  //   }\n}\n","import { useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom';\nimport toast from 'react-hot-toast';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport PropTypes from 'prop-types';\nimport numeral from 'numeral';\nimport {\n  // Autocomplete,\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Divider,\n  Autocomplete,\n  // Checkbox,\n  // FormControlLabel,\n  CardHeader,\n  FormHelperText,\n  Grid,\n  TextField,\n  Typography\n} from '@material-ui/core';\nimport ClientRepository from '../../../../repositories/client.repository';\nimport OrderRepository from '../../../../repositories/order.repository';\nimport MobileDateTimePicker from '@material-ui/lab/MobileDateTimePicker';\nimport useInput from '../../../../hooks/useInput';\nimport DriverRepository from '../../../../repositories/driver.repository';\n// import Map from '../../map/Map';\n// import FileDropzone from '../../FileDropzone';\n// import QuillEditor from '../../QuillEditor';\n// import firebase from '../../../../lib/firebase';\n// import useAuth from '../../../hooks/useAuth';\n// import NumberFormat from 'react-number-format';\n\nconst OrderForm1 = (props) => {\n  const clientRepository = new ClientRepository();\n  const orderRepository = new OrderRepository();\n  const driverRepository = new DriverRepository();\n  const address = useInput('');\n  console.log(address.suggestions);\n  // const auth = useAuth();\n  // const navigate = useNavigate();\n  // const [files, setFiles] = useState([]);\n  // const clientsOptions = [];\n  // const vehiclesOptions = [];\n  // const empty = '';\n  const { setStatusForm, dataClient, statusRegisterClient } = props;\n  // console.log(dataClient);\n  const registerClient = async (values) => {\n    let response;\n    const dataClientRegister = {\n      dni: values.client_dni,\n      name: values.client_name,\n      lastname: values.client_lastname,\n      phones: [values.phones],\n      direction: values.direction,\n      zipcode: values.zipcode,\n      status_id: '0',\n      coordinates: '-87, 64',\n      score: '0'\n    };\n    await clientRepository.createClient(dataClientRegister).then((res) => {\n      response = res;\n    }).catch((err) => {\n      console.log('Error al crear usuario', err);\n      // return response;\n    });\n    return response;\n  };\n\n  const registerOrden = async (values) => {\n    let response;\n    console.log('---------', dataClient.id);\n    if (statusRegisterClient) {\n      const dataOrdenCreate = {\n        client_id: dataClient.id,\n        store_id: 1,\n        driver_id: null,\n        status_id: '0',\n        price: 20,\n        final_price: 20,\n        preparation_estimated_time: values.preparation_estimated_time,\n        delivery_estimated_time: values.delivery_estimated_time\n      };\n      response = await orderRepository.createOrder(dataOrdenCreate);\n    } else {\n      response = await registerClient(values).then(async (res) => {\n        console.log('---------', res);\n        const dataOrdenCreate = {\n          client_id: res.data.data.id,\n          store_id: 1,\n          driver_id: null,\n          status_id: '0',\n          price: 20,\n          final_price: 20,\n          preparation_estimated_time: values.preparation_estimated_time,\n          delivery_estimated_time: values.delivery_estimated_time\n        };\n        return orderRepository.createOrder(dataOrdenCreate);\n      });\n    }\n    return response;\n  };\n\n  useEffect(() => {\n  }, []);\n\n  return (\n    <Formik\n      initialValues={{\n        client_dni: dataClient.dni,\n        client_name: statusRegisterClient ? dataClient.name : '',\n        client_lastname: statusRegisterClient ? dataClient.lastname : '',\n        phones: statusRegisterClient ? dataClient.phones[0].toString() : '',\n        direction: statusRegisterClient ? dataClient.direction : '',\n        zipcode: statusRegisterClient ? dataClient.zipcode : '',\n        origin_location: '',\n        destination_location: '',\n        price: '',\n        final_price: '',\n        preparation_estimated_time: new Date().toISOString(),\n        delivery_estimated_time: new Date().toISOString()\n        // submit: null\n      }}\n      validationSchema={Yup\n        .object()\n        .shape({\n          client_dni: Yup.string().max(255).required(),\n          client_name: Yup.string().max(255).required(),\n          client_lastname: Yup.string().max(255).required(),\n          phones: Yup.string().max(255).required(),\n          direction: Yup.string().max(255).required('Campo Requerido'),\n          zipcode: Yup.string().max(255).required(),\n          price: Yup.string().max(255),\n          final_price: Yup.string().max(255),\n          preparation_estimated_time: Yup.date().required('Campo Requerido'),\n          delivery_estimated_time: Yup.date().required('Campo Requerido'),\n        })}\n      onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\n        try {\n          console.log(values);\n          registerOrden(values).then((res) => {\n            console.log(res.data.data.id);\n            driverRepository.postNotify(1, res.data.data.id).then((com) => console.log('SE CREO', com));\n            if (res.status === 201 || res.status === '201') {\n              setStatusForm('3');\n            }\n          });\n        } catch (err) {\n          console.error(err);\n          toast.error('Ha Ocurrido un error para crear su Orden!');\n          setStatus({ success: false });\n          setErrors({ submit: err.message });\n          setSubmitting(false);\n        }\n      }}\n    >\n      {({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        setFieldValue,\n        touched,\n        values\n      }) => (\n        <form\n          onSubmit={handleSubmit}\n          {...props}\n        >\n          <Grid\n            container\n            spacing={3}\n          >\n            <Grid\n              item\n              lg={12}\n              md={12}\n              xs={12}\n            >\n              <Card>\n                <CardHeader title=\"Datos del Cliente\" />\n                <Divider />\n                <CardContent>\n                  <Grid\n                    container\n                    spacing={3}\n                  >\n                    <Grid\n                      item\n                      md={6}\n                      xs={12}\n                    >\n                      <TextField\n                        error={Boolean(touched.client_name && errors.client_name)}\n                        fullWidth\n                        disabled={statusRegisterClient}\n                        helperText={touched.client_name && errors.client_name ? 'Campo Requerido' : null}\n                        label=\"Nombre\"\n                        name=\"client_name\"\n                        type=\"text\"\n                        onBlur={handleBlur}\n                        onChange={handleChange}\n                        value={values.client_name}\n                        variant=\"outlined\"\n                      />\n                    </Grid>\n                    <Grid\n                      item\n                      md={6}\n                      xs={12}\n                    >\n                      <TextField\n                        error={Boolean(touched.client_lastname && errors.client_lastname)}\n                        fullWidth\n                        disabled={statusRegisterClient}\n                        helperText={touched.client_lastname && errors.client_lastname ? 'Campo Requerido' : null}\n                        label=\"Apellido\"\n                        name=\"client_lastname\"\n                        type=\"text\"\n                        onBlur={handleBlur}\n                        onChange={handleChange}\n                        value={values.client_lastname}\n                        variant=\"outlined\"\n                      />\n                    </Grid>\n                    <Grid\n                      item\n                      md={6}\n                      xs={12}\n                    >\n                      <TextField\n                        error={Boolean(touched.client_dni && errors.client_dni)}\n                        fullWidth\n                        disabled\n                        helperText={touched.client_dni && errors.client_dni ? 'Campo Requerido' : null}\n                        label=\"DNI\"\n                        name=\"dni\"\n                        type=\"text\"\n                        onBlur={handleBlur}\n                        onChange={handleChange}\n                        value={values.client_dni}\n                        // variant=\"outlined\"\n                      />\n                    </Grid>\n                    <Grid\n                      item\n                      md={6}\n                      xs={12}\n                    >\n                      <TextField\n                        error={Boolean(touched.phones && errors.phones)}\n                        fullWidth\n                        disabled={statusRegisterClient}\n                        helperText={touched.phones && errors.phones ? 'Campo Requerido' : null}\n                        label=\"Telefono\"\n                        name=\"phones\"\n                        type=\"number\"\n                        onBlur={handleBlur}\n                        onChange={handleChange}\n                        value={values.phones}\n                        variant=\"outlined\"\n                      />\n                    </Grid>\n                    <Grid\n                      item\n                      md={6}\n                      xs={6}\n                    >\n                      <TextField\n                        error={Boolean(touched.zipcode && errors.zipcode)}\n                        fullWidth\n                        disabled={statusRegisterClient}\n                        helperText={touched.zipcode && errors.zipcode ? 'Campo Requerido' : null}\n                        label=\"Código Postal\"\n                        name=\"zipcode\"\n                        type=\"text\"\n                        onBlur={handleBlur}\n                        onChange={handleChange}\n                        value={values.zipcode}\n                        variant=\"outlined\"\n                      />\n                    </Grid>\n                    <Grid\n                      item\n                      md={12}\n                      xs={12}\n                    >\n                      <TextField\n                        error={Boolean(touched.direction && errors.direction)}\n                        fullWidth\n                        disabled={statusRegisterClient}\n                        helperText={touched.direction && errors.direction}\n                        label=\"Dirección\"\n                        name=\"direction\"\n                        type=\"text\"\n                        multiline\n                        onBlur={handleBlur}\n                        onChange={handleChange}\n                        value={values.direction}\n                        variant=\"outlined\"\n                        rows={6}\n                      />\n                    </Grid>\n                  </Grid>\n                </CardContent>\n              </Card>\n            </Grid>\n            <Grid\n              item\n              lg={12}\n              md={12}\n              xs={12}\n            >\n              <Box sx={{ mt: 3 }}>\n                <Card>\n                  <CardHeader title=\"Descripción de la Orden\" />\n                  <Divider />\n                  <CardContent>\n                    <Autocomplete\n                      getOptionLabel={(option) => option.place_name}\n                      isOptionEqualToValue={(option, value) => option.place_name === value.place_name}\n                      // getOptionLabel={(option) => option.name}\n                      onChange={(e, value) => {\n                        setFieldValue('origin_location', value);\n                      }}\n                      options={address.suggestions}\n                      renderInput={(params) => (\n                        <TextField\n                          error={Boolean(touched.origin_location && errors.origin_location)}\n                          fullWidth\n                          label=\"Ubicación de Origen\"\n                          placeholder=\"Introduzca la ubicación de origen\"\n                          helperText={touched.origin_location && errors.origin_location}\n                          name=\"origin_location\"\n                          variant=\"outlined\"\n                          onChange={(e) => {\n                            address.onchange(e);\n                          }}\n                          // inputRef={ref}\n                          value={values.origin_location}\n                          {...params}\n                        />\n                      )}\n                    />\n                    <Autocomplete\n                      getOptionLabel={(option) => option.place_name}\n                      isOptionEqualToValue={(option, value) => option.place_name === value.place_name}\n                      // getOptionLabel={(option) => option.name}\n                      onChange={(e, value) => {\n                        setFieldValue('destination_location', value);\n                      }}\n                      options={address.suggestions}\n                      sx={{ mt: 3 }}\n                      renderInput={(params) => (\n                        <TextField\n                          error={Boolean(touched.destination_location && errors.destination_location)}\n                          fullWidth\n                          label=\"Ubicación de Destino\"\n                          placeholder=\"Introduzca la ubicación de \"\n                          helperText={touched.destination_location && errors.destination_location}\n                          name=\"destination_location\"\n                          variant=\"outlined\"\n                          onChange={(e) => {\n                            address.onchange(e);\n                          }}\n                          // inputRef={ref}\n                          value={values.destination_location}\n                          {...params}\n                        />\n                      )}\n                    />\n                    <Box sx={{ mt: 2 }}>\n                      <MobileDateTimePicker\n                        label=\"Tiempo estimada de Preparación\"\n                        onChange={(date) => setFieldValue('preparation_estimated_time', date.toISOString())}\n                        renderInput={(inputProps) => (\n                          <TextField\n                            fullWidth\n                            variant=\"outlined\"\n                            {...inputProps}\n                          />\n                        )}\n                        value={values.preparation_estimated_time}\n                      />\n                    </Box>\n                    <Box sx={{ mt: 2 }}>\n                      <MobileDateTimePicker\n                        label=\"Tiempo estimado para el Delivery\"\n                        onChange={(date) => setFieldValue('delivery_estimated_time', date.toISOString())}\n                        renderInput={(inputProps) => (\n                          <TextField\n                            fullWidth\n                            variant=\"outlined\"\n                            {...inputProps}\n                          />\n                        )}\n                        value={values.delivery_estimated_time}\n                      />\n                    </Box>\n                  </CardContent>\n                </Card>\n              </Box>\n            </Grid>\n            <Grid\n              item\n              lg={12}\n              md={12}\n              xs={12}\n            >\n              <Box sx={{ mt: 3 }}>\n                <Card>\n                  <CardHeader title=\"Tarifa\" />\n                  <Divider />\n                  <CardContent>\n                    <Box\n                      sx={{\n                        display: 'flex',\n                        justifyContent: 'space-between',\n                        mt: 2\n                      }}\n                    >\n                      <Typography\n                        color=\"textPrimary\"\n                        variant=\"subtitle2\"\n                      >\n                        Subtotal\n                      </Typography>\n                      <Typography\n                        color=\"textPrimary\"\n                        variant=\"subtitle2\"\n                      >\n                        $\n                        {numeral(20).format('00.00')}\n                      </Typography>\n                    </Box>\n                    {/* <Box\n                      sx={{\n                        display: 'flex',\n                        justifyContent: 'space-between',\n                        mt: 2\n                      }}\n                    >\n                      <Typography\n                        color=\"textPrimary\"\n                        variant=\"subtitle2\"\n                      >\n                        Shipping Tax\n                      </Typography>\n                      <Typography\n                        color=\"textPrimary\"\n                        variant=\"subtitle2\"\n                      >\n                        $\n                        {numeral(10).format('00.00')}\n                      </Typography>\n                    </Box> */}\n                    <Divider sx={{ my: 2 }} />\n                    <Box\n                      sx={{\n                        display: 'flex',\n                        justifyContent: 'space-between'\n                      }}\n                    >\n                      <Typography\n                        color=\"textPrimary\"\n                        variant=\"subtitle2\"\n                      >\n                        Total\n                      </Typography>\n                      <Typography\n                        color=\"textPrimary\"\n                        variant=\"subtitle2\"\n                      >\n                        $\n                        {numeral(20).format('00.00')}\n                      </Typography>\n                    </Box>\n                  </CardContent>\n                </Card>\n              </Box>\n            </Grid>\n            {/* <Grid\n              item\n              lg={12}\n              md={12}\n              xs={12}\n            >\n              <Box sx={{ mt: 3 }}>\n                <Card>\n                  <CardHeader title=\"Dirección\" />\n                  <CardContent>\n                    <Box\n                      sx={{\n                        display: 'flex',\n                        justifyContent: 'flex-end',\n                        padding: 3\n                      }}\n                    >\n                      <Map />\n                    </Box>\n                  </CardContent>\n                </Card>\n              </Box>\n            </Grid> */}\n            <Grid\n              item\n              lg={2}\n              md={2}\n              xs={12}\n            >\n              {errors.submit && (\n                <Box sx={{ mt: 3 }}>\n                  <FormHelperText error>\n                    {errors.submit}\n                  </FormHelperText>\n                </Box>\n              )}\n              <Box\n                sx={{\n                  display: 'flex',\n                  justifyContent: 'flex-end',\n                  mt: 3\n                }}\n              >\n                <Button\n                  color=\"primary\"\n                  disabled={isSubmitting}\n                  type=\"submit\"\n                  variant=\"contained\"\n                  onClick={() => setStatusForm('2')}\n                >\n                  Registrar Orden\n                </Button>\n              </Box>\n            </Grid>\n          </Grid>\n        </form>\n      )}\n    </Formik>\n  );\n};\nOrderForm1.propTypes = {\n  setStatusForm: PropTypes.func,\n  dataClient: PropTypes.object,\n  statusRegisterClient: PropTypes.bool\n};\n\nexport default OrderForm1;\n","import { Avatar, Box, Button, Container, Paper, Typography } from '@material-ui/core';\nimport { alpha } from '@material-ui/core/styles';\nimport CheckIcon from '../../../icons/Check';\nimport { Link as RouterLink } from 'react-router-dom';\n\nconst Modal9 = () => (\n  <Box\n    sx={{\n      backgroundColor: 'background.default',\n      minHeight: '100%',\n      p: 3\n    }}\n  >\n    <Container maxWidth=\"sm\">\n      <Paper\n        elevation={12}\n        sx={{\n          p: 3,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center'\n        }}\n      >\n        <Avatar\n          sx={{\n            backgroundColor: (theme) => alpha(theme.palette.success.main, 0.08),\n            color: 'success.main',\n            mb: 2\n          }}\n        >\n          <CheckIcon />\n        </Avatar>\n        <Typography\n          color=\"textPrimary\"\n          variant=\"h5\"\n        >\n          Orden Creada!\n        </Typography>\n        <Typography\n          align=\"center\"\n          color=\"textSecondary\"\n          sx={{ mt: 1 }}\n          variant=\"body2\"\n        >\n          Su orden ha sido enviada correctamente, este\n          atento en la bandeja de notificaciones en donde\n          se le avisará si un driver aceptó la orden.\n        </Typography>\n        <Button\n          color=\"primary\"\n          fullWidth\n          size=\"large\"\n          sx={{ mt: 4 }}\n          variant=\"contained\"\n          component={RouterLink}\n          to=\"/dashboard\"\n        >\n          Ir al Inicio\n        </Button>\n      </Paper>\n    </Container>\n  </Box>\n);\n\nexport default Modal9;\n","import { useEffect, useState } from 'react';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { Helmet } from 'react-helmet-async';\nimport { Box, Breadcrumbs, Button, Container, Grid, Link, Typography } from '@material-ui/core';\nimport useSettings from '../../../../hooks/useSettings';\nimport ArrowLeftIcon from '../../../../icons/ArrowLeft';\nimport ChevronRightIcon from '../../../../icons/ChevronRight';\nimport gtm from '../../../../lib/gtm';\nimport OrderForm from '../../../../components/dashboard/store/orders/OrderForm';\nimport OrderForm1 from '../../../../components/dashboard/store/orders/OrderForm1';\nimport Modal9 from '../../../../components/widgets/modals/Modal9';\n\nconst OrderCreate = () => {\n  const { settings } = useSettings();\n  const [statusForm, setstatusform] = useState('1');\n  const [dataClient, setdataclient] = useState({});\n  const [statusRegisterClient, setstatusregisterclient] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    gtm.push({ event: 'page_view' });\n  }, []);\n\n  return (\n    <>\n      <Helmet>\n        <title>Dashboard: Crear Orden | Mac </title>\n      </Helmet>\n      <Box\n        sx={{\n          backgroundColor: 'background.default',\n          minHeight: '100%',\n          py: 8\n        }}\n      >\n        <Container maxWidth={settings.compact ? 'xl' : false}>\n          <Grid\n            container\n            justifyContent=\"space-between\"\n            spacing={3}\n          >\n            <Grid item>\n              <Typography\n                color=\"textPrimary\"\n                variant=\"h5\"\n              >\n                Crear Orden\n              </Typography>\n              <Breadcrumbs\n                aria-label=\"breadcrumb\"\n                separator={<ChevronRightIcon fontSize=\"small\" />}\n                sx={{ mt: 1 }}\n              >\n                <Link\n                  color=\"textPrimary\"\n                  component={RouterLink}\n                  to=\"/dashboard\"\n                  variant=\"subtitle2\"\n                >\n                  Dashboard\n                </Link>\n                <Typography\n                  color=\"textSecondary\"\n                  variant=\"subtitle2\"\n                >\n                  Crear Orden\n                </Typography>\n              </Breadcrumbs>\n            </Grid>\n            <Grid item>\n              <Box sx={{ m: -1 }}>\n                <Button\n                  color=\"primary\"\n                  // component={RouterLink}\n                  startIcon={<ArrowLeftIcon fontSize=\"small\" />}\n                  sx={{ mt: 1 }}\n                  variant=\"outlined\"\n                  onClick={() => {\n                    if (statusForm === '1' || statusForm === '3') {\n                      navigate('/dashboard');\n                    } else if (statusForm === '2') {\n                      setstatusform('1');\n                    }\n                  }}\n                >\n                  {statusForm === '2' ? 'Regresar' : 'Cancelar'}\n                </Button>\n              </Box>\n            </Grid>\n          </Grid>\n          <Box sx={{ mt: 3 }}>\n            { statusForm === '1' && (\n            <OrderForm\n              setStatusForm={setstatusform}\n              setDataClient={setdataclient}\n              dataClient={dataClient}\n              setStatusRegisterClient={setstatusregisterclient}\n            />\n            )}\n            { statusForm === '2' && (\n            <OrderForm1\n              setStatusForm={setstatusform}\n              dataClient={dataClient}\n              statusRegisterClient={statusRegisterClient}\n            />\n            )}\n            { statusForm === '3'\n            && (\n            <Grid\n              container\n              spacing={3}\n            >\n              <Grid\n                item\n                lg={12}\n                md={12}\n                xs={12}\n              >\n                <Modal9 />\n              </Grid>\n            </Grid>\n            )}\n          </Box>\n        </Container>\n      </Box>\n    </>\n  );\n};\n\nexport default OrderCreate;\n","import createSvgIcon from '@material-ui/core/utils/createSvgIcon';\n\nconst ArrowLeft = createSvgIcon(\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>, 'ArrowLeft'\n);\n\nexport default ArrowLeft;\n","import createSvgIcon from '@material-ui/core/utils/createSvgIcon';\n\nconst Check = createSvgIcon(\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>, 'Check'\n);\n\nexport default Check;\n","import axios from 'axios';\nimport { EndpointConfig } from '../config/config';\n\nexport default class OrderRepository {\n  // Definir el cliente Axios para consumir el servicio\n  get ws() {\n    const cfg = new EndpointConfig();\n    const ws = axios.create({\n      baseURL: cfg.URL_DEV,\n      headers: cfg.headerToken(),\n    });\n    return ws;\n  }\n\n  async getAllOrders() {\n    const endpoint = '/deliveries';\n    const res = await this.ws.get(endpoint);\n    return res.data;\n  }\n\n  async getOrderById(id) {\n    const endpoint = `/deliveries/${id}`;\n    const res = await this.ws.get(endpoint);\n    return res.data;\n  }\n\n  //   async update(id, body) {\n  //     const endpoint = `/users/${id}`;\n\n  //     let res = await this.ws.put(endpoint, body);\n  //     return res;\n  //   }\n\n  async createOrder(body) {\n    const endpoint = '/deliveries';\n    const res = await this.ws.post(endpoint, body);\n    return res;\n  }\n\n  //   async remove(id) {\n  //     const endpoint = `/users/${id}`;\n\n  //     let res = await this.ws.delete(endpoint);\n  //     return res;\n  //   }\n}\n","import axios from 'axios';\nimport { EndpointConfig } from '../config/config';\n\nexport default class ClientRepository {\n  // Definir el cliente Axios para consumir el servicio\n  get ws() {\n    const cfg = new EndpointConfig();\n    const ws = axios.create({\n      baseURL: cfg.URL_DEV,\n      headers: cfg.headerToken(),\n    });\n    return ws;\n  }\n\n  async getAllClients() {\n    const endpoint = '/clients';\n    const res = await this.ws.get(endpoint);\n    return res.data;\n  }\n\n  async getClientById(id) {\n    const endpoint = `/clients/${id}`;\n    const res = await this.ws.get(endpoint);\n    return res.data;\n  }\n\n  async updateClient(id, body) {\n    const endpoint = `/clients/${id}`;\n    const res = await this.ws.put(endpoint, body);\n    return res;\n  }\n\n  async createClient(body) {\n    const endpoint = '/clients';\n    const res = await this.ws.post(endpoint, body);\n    return res;\n  }\n\n  async removeClient(id) {\n    const endpoint = `/clients/${id}`;\n\n    const res = await this.ws.delete(endpoint);\n    return res;\n  }\n}\n"],"sourceRoot":""}