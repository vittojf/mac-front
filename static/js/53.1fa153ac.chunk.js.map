{"version":3,"sources":["components/dashboard/store/clients/ClientsListTable.js","views/dashboard/store/clients/ClientsList.js","icons/Search.js","repositories/client.repository.js"],"names":["sortOptions","label","value","descendingComparator","a","b","orderBy","applySort","customers","sort","split","comparator","order","getComparator","stabilizedThis","map","el","index","newOrder","ClientsListTable","props","other","useState","selectedCustomers","setSelectedCustomers","page","setPage","limit","setLimit","query","setQuery","hasAcceptedMarketing","isProspect","isReturning","filters","filteredCustomers","filter","customer","matches","containsQuery","forEach","property","toLowerCase","includes","Object","keys","key","applyFilters","paginatedCustomers","slice","applyPagination","enableBulkActions","length","selectedSomeCustomers","selectedAllCustomers","Card","Box","sx","alignItems","display","flexWrap","m","p","maxWidth","width","TextField","fullWidth","InputProps","startAdornment","InputAdornment","position","Search","fontSize","onChange","event","target","placeholder","variant","backgroundColor","mt","px","zIndex","Checkbox","checked","color","indeterminate","id","Button","ml","Scrollbar","minWidth","Table","TableHead","TableRow","TableCell","TableBody","isCustomerSelected","hover","selected","Avatar","height","getInitials","name","Link","component","RouterLink","to","lastname","dni","direction","phones","zipcode","align","TablePagination","count","onPageChange","newPage","onRowsPerPageChange","parseInt","rowsPerPage","rowsPerPageOptions","ClientsList","clientRepository","ClientRepository","mounted","useMounted","settings","useSettings","setCustomers","useEffect","gtm","push","getCustomers","useCallback","getAllClients","data","console","error","minHeight","py","Container","compact","Grid","container","justifyContent","spacing","item","Typography","Breadcrumbs","separator","ChevronRight","createSvgIcon","xmlns","viewBox","fill","fillRule","d","clipRule","cfg","EndpointConfig","axios","create","baseURL","URL_DEV","headers","headerToken","this","ws","get","res","endpoint","body","put","post","delete"],"mappings":"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","file":"static/js/53.1fa153ac.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n// import numeral from 'numeral';\nimport PropTypes from 'prop-types';\nimport {\n  Avatar,\n  Box,\n  Button,\n  Card,\n  Checkbox,\n  // Divider,\n  // IconButton,\n  InputAdornment,\n  Link,\n  // Tab,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  // Tabs,\n  TextField,\n  // Typography\n} from '@material-ui/core';\n// import ArrowRightIcon from '../../../../icons/ArrowRight';\n// import PencilAltIcon from '../../../../icons/PencilAlt';\nimport SearchIcon from '../../../../icons/Search';\nimport getInitials from '../../../../utils/getInitials';\nimport Scrollbar from '../../../Scrollbar';\n\n// const tabs = [\n//   {\n//     label: 'All',\n//     value: 'all'\n//   },\n//   {\n//     label: 'Accepts Marketing',\n//     value: 'hasAcceptedMarketing'\n//   },\n//   {\n//     label: 'Prospect',\n//     value: 'isProspect'\n//   },\n//   {\n//     label: 'Returning',\n//     value: 'isReturning'\n//   }\n// ];\n\nconst sortOptions = [\n  {\n    label: 'DNI',\n    value: 'updatedAt|desc'\n  },\n  {\n    label: 'Nombre',\n    value: 'updatedAt|asc'\n  },\n  // {\n  //   label: 'Total',\n  //   value: 'orders|desc'\n  // },\n  // {\n  //   label: 'Total',\n  //   value: 'orders|asc'\n  // }\n];\n\nconst applyFilters = (customers, query, filters) => customers\n  .filter((customer) => {\n    let matches = true;\n\n    if (query) {\n      const properties = ['dni', 'name'];\n      let containsQuery = false;\n\n      properties.forEach((property) => {\n        if (customer[property].toLowerCase().includes(query.toLowerCase())) {\n          containsQuery = true;\n        }\n      });\n\n      if (!containsQuery) {\n        matches = false;\n      }\n    }\n\n    Object.keys(filters).forEach((key) => {\n      const value = filters[key];\n\n      if (value && customer[key] !== value) {\n        matches = false;\n      }\n    });\n\n    return matches;\n  });\n\nconst applyPagination = (customers, page, limit) => customers\n  .slice(page * limit, page * limit + limit);\n\nconst descendingComparator = (a, b, orderBy) => {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n\n  return 0;\n};\n\nconst getComparator = (order, orderBy) => (order === 'desc'\n  ? (a, b) => descendingComparator(a, b, orderBy)\n  : (a, b) => -descendingComparator(a, b, orderBy));\n\nconst applySort = (customers, sort) => {\n  const [orderBy, order] = sort.split('|');\n  const comparator = getComparator(order, orderBy);\n  const stabilizedThis = customers.map((el, index) => [el, index]);\n\n  stabilizedThis.sort((a, b) => {\n    const newOrder = comparator(a[0], b[0]);\n\n    if (newOrder !== 0) {\n      return newOrder;\n    }\n\n    return a[1] - b[1];\n  });\n\n  return stabilizedThis.map((el) => el[0]);\n};\n\nconst ClientsListTable = (props) => {\n  const { customers, ...other } = props;\n  // const [currentTab, setCurrentTab] = useState('all');\n  const [selectedCustomers, setSelectedCustomers] = useState([]);\n  const [page, setPage] = useState(0);\n  const [limit, setLimit] = useState(5);\n  const [query, setQuery] = useState('');\n  const sort = sortOptions[0].value;\n  const [filters] = useState({\n    hasAcceptedMarketing: null,\n    isProspect: null,\n    isReturning: null\n  });\n\n  // const handleTabsChange = (event, value) => {\n  //   const updatedFilters = {\n  //     ...filters,\n  //     hasAcceptedMarketing: null,\n  //     isProspect: null,\n  //     isReturning: null\n  //   };\n\n  //   if (value !== 'all') {\n  //     updatedFilters[value] = true;\n  //   }\n\n  //   setFilters(updatedFilters);\n  //   setSelectedCustomers([]);\n  //   setCurrentTab(value);\n  // };\n\n  const handleQueryChange = (event) => {\n    setQuery(event.target.value);\n  };\n\n  // const handleSortChange = (event) => {\n  //   setSort(event.target.value);\n  // };\n\n  const handleSelectAllCustomers = (event) => {\n    setSelectedCustomers(event.target.checked\n      ? customers.map((customer) => customer.id)\n      : []);\n  };\n\n  // const handleSelectOneCustomer = (event, customerId) => {\n  //   if (!selectedCustomers.includes(customerId)) {\n  //     setSelectedCustomers((prevSelected) => [...prevSelected, customerId]);\n  //   } else {\n  //     setSelectedCustomers((prevSelected) => prevSelected.filter((id) => id !== customerId));\n  //   }\n  // };\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleLimitChange = (event) => {\n    setLimit(parseInt(event.target.value, 10));\n  };\n\n  const filteredCustomers = applyFilters(customers, query, filters);\n  const sortedCustomers = applySort(filteredCustomers, sort);\n  const paginatedCustomers = applyPagination(sortedCustomers, page, limit);\n  const enableBulkActions = selectedCustomers.length > 0;\n  const selectedSomeCustomers = selectedCustomers.length > 0\n    && selectedCustomers.length < customers.length;\n  const selectedAllCustomers = selectedCustomers.length === customers.length;\n\n  return (\n    <Card {...other}>\n      <Box\n        sx={{\n          alignItems: 'center',\n          display: 'flex',\n          flexWrap: 'wrap',\n          m: -1,\n          p: 2\n        }}\n      >\n        <Box\n          sx={{\n            m: 1,\n            maxWidth: '100%',\n            width: 500\n          }}\n        >\n          <TextField\n            fullWidth\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <SearchIcon fontSize=\"small\" />\n                </InputAdornment>\n              )\n            }}\n            onChange={handleQueryChange}\n            placeholder=\"Buscar...\"\n            value={query}\n            variant=\"outlined\"\n          />\n        </Box>\n        {/* <Box\n          sx={{\n            m: 1,\n            width: 240\n          }}\n        >\n          <TextField\n            label=\"Ordenar Por\"\n            name=\"sort\"\n            onChange={handleSortChange}\n            select\n            SelectProps={{ native: true }}\n            value={sort}\n            variant=\"outlined\"\n          >\n            {sortOptions.map((option) => (\n              <option\n                key={option.value}\n                value={option.value}\n              >\n                {option.label}\n              </option>\n            ))}\n          </TextField>\n        </Box> */}\n      </Box>\n      {enableBulkActions && (\n        <Box sx={{ position: 'relative' }}>\n          <Box\n            sx={{\n              backgroundColor: 'background.paper',\n              mt: '6px',\n              position: 'absolute',\n              px: '4px',\n              width: '100%',\n              zIndex: 2\n            }}\n          >\n            <Checkbox\n              checked={selectedAllCustomers}\n              color=\"primary\"\n              indeterminate={selectedSomeCustomers}\n              onChange={handleSelectAllCustomers}\n            />\n            <Button\n              color=\"primary\"\n              sx={{ ml: 2 }}\n              variant=\"outlined\"\n            >\n              Delete\n            </Button>\n            <Button\n              color=\"primary\"\n              sx={{ ml: 2 }}\n              variant=\"outlined\"\n            >\n              Edit\n            </Button>\n          </Box>\n        </Box>\n      )}\n      <Scrollbar>\n        <Box sx={{ minWidth: 700 }}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                {/* <TableCell padding=\"checkbox\">\n                  <Checkbox\n                    checked={selectedAllCustomers}\n                    color=\"primary\"\n                    indeterminate={selectedSomeCustomers}\n                    onChange={handleSelectAllCustomers}\n                  />\n                </TableCell> */}\n                <TableCell>\n                  Nombre\n                </TableCell>\n                <TableCell>\n                  Apellido\n                </TableCell>\n                <TableCell>\n                  DNI\n                </TableCell>\n                <TableCell>\n                  Dirección\n                </TableCell>\n                <TableCell>\n                  Teléfono\n                </TableCell>\n                <TableCell>\n                  Cod. Postal\n                </TableCell>\n                {/* <TableCell align=\"right\">\n                  Acciones\n                </TableCell> */}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {paginatedCustomers.map((customer) => {\n                const isCustomerSelected = selectedCustomers.includes(customer.id);\n\n                return (\n                  <TableRow\n                    hover\n                    key={customer.id}\n                    selected={isCustomerSelected}\n                  >\n                    {/* <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        checked={isCustomerSelected}\n                        color=\"primary\"\n                        onChange={(event) => handleSelectOneCustomer(event, customer.id)}\n                        value={isCustomerSelected}\n                      />\n                    </TableCell> */}\n                    <TableCell>\n                      <Box\n                        sx={{\n                          alignItems: 'center',\n                          display: 'flex'\n                        }}\n                      >\n                        <Avatar\n                          // src={customer.avatar2}\n                          sx={{\n                            height: 42,\n                            width: 42\n                          }}\n                        >\n                          {getInitials(customer.name)}\n                        </Avatar>\n                        <Box sx={{ ml: 1 }}>\n                          <Link\n                            color=\"inherit\"\n                            component={RouterLink}\n                            to={`/dashboard/taller/clientes/detalles/${customer.id}`}\n                            variant=\"subtitle2\"\n                          >\n                            {customer.name}\n                          </Link>\n                          {/* <Typography\n                            color=\"textSecondary\"\n                            variant=\"body2\"\n                          >\n                            {customer.brand_name}\n                          </Typography> */}\n                        </Box>\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      {`${customer.lastname}`}\n                    </TableCell>\n                    <TableCell>\n                      {`${customer.dni}`}\n                    </TableCell>\n                    <TableCell>\n                      {customer.direction}\n                    </TableCell>\n                    <TableCell>\n                      {customer.phones[0]}\n                    </TableCell>\n                    <TableCell>\n                      {customer.zipcode}\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      {/* <IconButton\n                        component={RouterLink}\n                        to=\"/dashboard/customers/1/edit\"\n                      >\n                        <PencilAltIcon fontSize=\"small\" />\n                      </IconButton> */}\n                      {/* <IconButton\n                        component={RouterLink}\n                        to={`/dashboard/taller/clientes/detalles/${customer.id}`}\n                      >\n                        <ArrowRightIcon fontSize=\"small\" />\n                      </IconButton> */}\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </Box>\n      </Scrollbar>\n      <TablePagination\n        component=\"div\"\n        count={filteredCustomers.length}\n        onPageChange={handlePageChange}\n        onRowsPerPageChange={handleLimitChange}\n        page={page}\n        rowsPerPage={limit}\n        rowsPerPageOptions={[5, 10, 25]}\n      />\n    </Card>\n  );\n};\n\nClientsListTable.propTypes = {\n  customers: PropTypes.array.isRequired\n};\n\nexport default ClientsListTable;\n","import { useState, useEffect, useCallback } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Helmet } from 'react-helmet-async';\nimport { Box, Breadcrumbs, Container, Grid, Link, Typography } from '@material-ui/core';\n// import { customerApi } from '../../__fakeApi__/customerApi';\nimport ClientsListTable from '../../../../components/dashboard/store/clients/ClientsListTable';\nimport useMounted from '../../../../hooks/useMounted';\nimport ChevronRightIcon from '../../../../icons/ChevronRight';\n// import DownloadIcon from '../../../icons/Download';\n// import PlusIcon from '../../../../icons/Plus';\n// import UploadIcon from '../../../icons/Upload';\nimport useSettings from '../../../../hooks/useSettings';\nimport gtm from '../../../../lib/gtm';\n// import useAuth from '../../../../hooks/useAuth';\n// import avatar from '../../../../assets/images/Mac/logo.jpg';\nimport ClientRepository from '../../../../repositories/client.repository';\n\nconst ClientsList = () => {\n  const clientRepository = new ClientRepository();\n  const mounted = useMounted();\n  const { settings } = useSettings();\n  const [customers, setCustomers] = useState([]);\n  // const { user } = useAuth();\n  // const navigate = useNavigate();\n\n  useEffect(() => {\n    gtm.push({ event: 'page_view' });\n  }, []);\n\n  const getCustomers = useCallback(async () => {\n    try {\n      const data = await clientRepository.getAllClients();\n      // console.log(data);\n      // if (mounted.current) {\n      //   setCustomers(data);\n      // }\n      setCustomers(data);\n    } catch (err) {\n      console.error(err);\n    }\n  }, [mounted]);\n\n  useEffect(() => {\n    getCustomers();\n  }, [getCustomers]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Dashboard: Clientes | Mac </title>\n      </Helmet>\n      <Box\n        sx={{\n          backgroundColor: 'background.default',\n          minHeight: '100%',\n          py: 8\n        }}\n      >\n        <Container maxWidth={settings.compact ? 'xl' : false}>\n          <Grid\n            container\n            justifyContent=\"space-between\"\n            spacing={3}\n          >\n            <Grid item>\n              <Typography\n                color=\"textPrimary\"\n                variant=\"h5\"\n              >\n                Lista de Clientes\n              </Typography>\n              <Breadcrumbs\n                aria-label=\"breadcrumb\"\n                separator={<ChevronRightIcon fontSize=\"small\" />}\n                sx={{ mt: 1 }}\n              >\n                <Link\n                  color=\"textPrimary\"\n                  component={RouterLink}\n                  to=\"/dashboard\"\n                  variant=\"subtitle2\"\n                >\n                  Dashboard\n                </Link>\n                <Typography\n                  color=\"textSecondary\"\n                  variant=\"subtitle2\"\n                >\n                  Listado de Clientes\n                </Typography>\n              </Breadcrumbs>\n            </Grid>\n            {/* <Grid item>\n              <Box sx={{ m: -1 }}>\n                <Button\n                  color=\"primary\"\n                  startIcon={<PlusIcon fontSize=\"small\" />}\n                  sx={{ m: 1 }}\n                  component={RouterLink}\n                  variant=\"contained\"\n                  to=\"/dashboard/store\"\n                >\n                  Agregar Cliente\n                </Button>\n              </Box>\n            </Grid> */}\n          </Grid>\n          <Box sx={{ mt: 3 }}>\n            <ClientsListTable customers={customers} />\n          </Box>\n        </Container>\n      </Box>\n    </>\n  );\n};\n\n/* eslint-disable eol-last */\nexport default ClientsList;","import createSvgIcon from '@material-ui/core/utils/createSvgIcon';\n\nconst Search = createSvgIcon(\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>, 'Search'\n);\n\nexport default Search;\n","import axios from 'axios';\nimport { EndpointConfig } from '../config/config';\n\nexport default class ClientRepository {\n  // Definir el cliente Axios para consumir el servicio\n  get ws() {\n    const cfg = new EndpointConfig();\n    const ws = axios.create({\n      baseURL: cfg.URL_DEV,\n      headers: cfg.headerToken(),\n    });\n    return ws;\n  }\n\n  async getAllClients() {\n    const endpoint = '/clients';\n    const res = await this.ws.get(endpoint);\n    return res.data;\n  }\n\n  async getClientById(id) {\n    const endpoint = `/clients/${id}`;\n    const res = await this.ws.get(endpoint);\n    return res.data;\n  }\n\n  async updateClient(id, body) {\n    const endpoint = `/clients/${id}`;\n    const res = await this.ws.put(endpoint, body);\n    return res;\n  }\n\n  async createClient(body) {\n    const endpoint = '/clients';\n    const res = await this.ws.post(endpoint, body);\n    return res;\n  }\n\n  async removeClient(id) {\n    const endpoint = `/clients/${id}`;\n\n    const res = await this.ws.delete(endpoint);\n    return res;\n  }\n}\n"],"sourceRoot":""}